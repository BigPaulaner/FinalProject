{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"docs/reference/app/","title":"App Module","text":"<p>Book Recommendation App</p> <ul> <li>This Flask application serves as a front-end for a book recommendation system. </li> <li>Users can register, log in, search for books using the Google Books API, and save their favorites. </li> <li>Favorites are stored in JSON format, and users can manage them through the app.</li> </ul> <p>Author: Paul, Tim, Thang Date: 06.10.2024 Version: 0.1.0 (major.minor.bugfix) License: Free</p>"},{"location":"docs/reference/app/#app.app","title":"<code>app = Flask(__name__)</code>  <code>module-attribute</code>","text":"<p>We used one static hardcoded key, for developing reasons</p>"},{"location":"docs/reference/app/#app.add_favorite","title":"<code>add_favorite()</code>","text":"<p>Label: Add Favorite Function</p> <p>Short Description: Adds selected books to the user's favorites list based on provided details.</p> <p>Parameters: - None.</p> <p>Return: - Redirect: Redirects to the favorites page (<code>/favorites</code>) after successfully adding books. - Tuple: Returns a message with a status code 400 if no books are selected or data is missing.</p> <p>Tests: - Test 1: Add Books to Favorites   - Input: Call <code>add_favorite()</code> with a POST request containing valid book details.   - Expected Outcome: The function adds the selected books to the user's favorites and      redirects to the favorites page.</p> <ul> <li>Test 2: Add Books without selecting one </li> <li>Input: Call <code>add_favorite()</code> with a POST request containing no selected books.</li> <li>Expected Outcome: The function logs an error and returns \"No books selected to add to favorites\".</li> </ul> Source code in <code>app.py</code> <pre><code>@app.route('/add_favorite', methods=['POST'])\ndef add_favorite():\n    \"\"\"\n    Label: Add Favorite Function\n\n    Short Description:\n    Adds selected books to the user's favorites list based on provided details.\n\n    Parameters:\n    - None.\n\n    Return:\n    - Redirect: Redirects to the favorites page (`/favorites`) after successfully adding books.\n    - Tuple: Returns a message with a status code 400 if no books are selected or data is missing.\n\n    Tests:\n    - Test 1: Add Books to Favorites\n      - Input: Call `add_favorite()` with a POST request containing valid book details.\n      - Expected Outcome: The function adds the selected books to the user's favorites and \n        redirects to the favorites page.\n\n    - Test 2: Add Books without selecting one \n      - Input: Call `add_favorite()` with a POST request containing no selected books.\n      - Expected Outcome: The function logs an error and returns \"No books selected to add to favorites\".\n    \"\"\"\n    user_id = session.get('user_id')\n\n    selected_books = request.form.getlist('selected_books')\n    if not selected_books:\n        logging.error(\"No books selected to add to favorites.\")\n        return \"No books selected.\", 400\n\n    for index in selected_books:\n        title = request.form.get(f'title_{index}')\n        author = request.form.get(f'author_{index}')\n        isbn = request.form.get(f'isbn_{index}')\n        publication_year = request.form.get(f'publication_year_{index}')\n        category = request.form.get(f'category_{index}', 'Uncategorized')\n\n        if not all([title, author, isbn, publication_year]):\n            logging.error(\"Missing data for one of the books.\")\n            return \"Missing data for one of the books.\", 400\n\n        # Prepare book details\n        book_details = {\n            'title': title,\n            'author': author,\n            'isbn': isbn,\n            'publication_year': publication_year,\n            'category': category\n        }\n\n        json_storage.save_favorite(user_id, book_details)\n        logging.info(\n            \"Added favorite book '%s' for user %s.\",\n            title, user_id\n        )\n\n    return redirect('/favorites')\n</code></pre>"},{"location":"docs/reference/app/#app.bookmark","title":"<code>bookmark()</code>","text":"<p>Label: Bookmark Function</p> <p>Short Description: Displays the user's bookmarked books.</p> <p>Parameters: - None.</p> <p>Return: - RenderedTemplate: Displays the <code>bookmarks.html</code> template with the user's bookmarked books. - Redirect: Redirects to the login page (<code>/login</code>) if the user is not logged in.</p> <p>Tests: - Test 1: Display Bookmarks   - Input: Call <code>bookmark()</code> with a GET request while logged in.   - Expected Outcome: The function retrieves and displays the user's bookmarked books on the <code>bookmarks.html</code> page.</p> <ul> <li>Test 2: Unauthorized Access to Bookmarks</li> <li>Input: Call <code>bookmark()</code> with a GET request without being logged in.</li> <li>Expected Outcome: The function logs a warning and redirects the user to the login page.</li> </ul> Source code in <code>app.py</code> <pre><code>@app.route('/bookmark', methods=['GET'])\ndef bookmark():\n    \"\"\"\n    Label: Bookmark Function\n\n    Short Description:\n    Displays the user's bookmarked books.\n\n    Parameters:\n    - None.\n\n    Return:\n    - RenderedTemplate: Displays the `bookmarks.html` template with the user's bookmarked books.\n    - Redirect: Redirects to the login page (`/login`) if the user is not logged in.\n\n    Tests:\n    - Test 1: Display Bookmarks\n      - Input: Call `bookmark()` with a GET request while logged in.\n      - Expected Outcome: The function retrieves and displays the user's bookmarked books on the `bookmarks.html` page.\n\n    - Test 2: Unauthorized Access to Bookmarks\n      - Input: Call `bookmark()` with a GET request without being logged in.\n      - Expected Outcome: The function logs a warning and redirects the user to the login page.\n    \"\"\"\n    user_id = session.get('user_id')\n    if not user_id:\n        logging.warning(\"Unauthorized access to bookmarks.\")\n        return redirect('/login')\n\n    # Load all favorites and filter for the current user\n    all_favorites = json_storage.load_all_favorites()\n    favorites = all_favorites.get(str(user_id), [])\n\n    logging.info(\"Displayed bookmarks for user %s.\", user_id)\n    return render_template('bookmarks.html', favorites=favorites)\n</code></pre>"},{"location":"docs/reference/app/#app.favorites","title":"<code>favorites()</code>","text":"<p>Label: Favorites Function</p> <p>Short Description: Displays the user's favorite books, optionally filtered by a selected category.</p> <p>Parameters: - None.</p> <p>Return: - RenderedTemplate: Displays the <code>favorites.html</code> template with the user's favorite books.   If a category filter is applied, only favorites matching the category are shown.</p> <p>Tests: - Test 1: Display All Favorites   - Input: Call <code>favorites()</code> with a GET request without any category filter.   - Expected Outcome: The function displays all favorite books for the logged-in user.</p> <ul> <li>Test 2: Display Favorites by Category</li> <li>Input: Call <code>favorites()</code> with a GET request including a category filter.</li> <li>Expected Outcome: The function filters the user's favorites by the specified category      and displays only the matching books.</li> </ul> Source code in <code>app.py</code> <pre><code>@app.route('/favorites', methods=['GET'])\ndef favorites():\n    \"\"\"\n    Label: Favorites Function\n\n    Short Description:\n    Displays the user's favorite books, optionally filtered by a selected category.\n\n    Parameters:\n    - None.\n\n    Return:\n    - RenderedTemplate: Displays the `favorites.html` template with the user's favorite books.\n      If a category filter is applied, only favorites matching the category are shown.\n\n    Tests:\n    - Test 1: Display All Favorites\n      - Input: Call `favorites()` with a GET request without any category filter.\n      - Expected Outcome: The function displays all favorite books for the logged-in user.\n\n    - Test 2: Display Favorites by Category\n      - Input: Call `favorites()` with a GET request including a category filter.\n      - Expected Outcome: The function filters the user's favorites by the specified category \n        and displays only the matching books.\n    \"\"\"\n    user_id = session.get('user_id')\n\n    # Load all favorites and filter only the current user's favorites\n    all_favorites = json_storage.load_all_favorites()\n    favorites_json = all_favorites.get(str(user_id), [])\n\n    # Optional: Filter by category\n    category_filter = request.args.get('category', None)\n    if category_filter:\n        favorites_json = [\n            book for book in favorites_json if book.get('category') == category_filter\n        ]\n\n    logging.info(\n        \"Favorites displayed for user %s with category filter '%s'.\",\n        user_id, category_filter\n    )\n    return render_template('favorites.html', favorites=favorites_json, category_filter=category_filter)\n</code></pre>"},{"location":"docs/reference/app/#app.index","title":"<code>index()</code>","text":"<p>Label: Index Function</p> <p>Short Description: Displays the homepage with streak information if the user is logged in. Redirects to the registration page if no user is logged in.</p> <p>Parameters: - None.</p> <p>Return: - Redirect or RenderedTemplate: Redirects to registration if no user is logged in.   Otherwise, it renders the homepage (<code>index.html</code>) with optional streak data.</p> <p>Tests: - Test 1: User Logged In   - Input: User ID is present in the session.   - Expected Outcome: Retrieves the user's streak data and renders the homepage with this information.</p> <ul> <li>Test 2: User Not Logged In</li> <li>Input: No user ID present in the session.</li> <li>Expected Outcome: Redirects the user to the registration page.</li> </ul> Source code in <code>app.py</code> <pre><code>@app.route('/')\ndef index():\n    \"\"\"\n    Label: Index Function\n\n    Short Description:\n    Displays the homepage with streak information if the user is logged in.\n    Redirects to the registration page if no user is logged in.\n\n    Parameters:\n    - None.\n\n    Return:\n    - Redirect or RenderedTemplate: Redirects to registration if no user is logged in.\n      Otherwise, it renders the homepage (`index.html`) with optional streak data.\n\n    Tests:\n    - Test 1: User Logged In\n      - Input: User ID is present in the session.\n      - Expected Outcome: Retrieves the user's streak data and renders the homepage with this information.\n\n    - Test 2: User Not Logged In\n      - Input: No user ID present in the session.\n      - Expected Outcome: Redirects the user to the registration page.\n    \"\"\"\n    user_id = session.get('user_id')\n\n    # Check if the user is logged in\n    if not user_id:\n        logging.info(\"Unauthenticated access attempt to the homepage. Redirecting to registration.\")\n        return redirect('/register')\n\n    # If the user is logged in, retrieve their streak data\n    streak_data = database.get_user_streak_data(user_id)\n    if streak_data:\n        logging.info(\"Displayed streak data for user ID: %s with current streak: %d days, longest streak: %d days.\",\n                     user_id, streak_data.get('current_streak', 0), streak_data.get('longest_streak', 0))\n    else:\n        logging.info(\"User ID %s is logged in, but no streak data found.\", user_id)\n\n    return render_template('index.html', streak_data=streak_data)\n</code></pre>"},{"location":"docs/reference/app/#app.learnings","title":"<code>learnings()</code>","text":"<p>Label: Learnings Function</p> <p>Short Description: Displays and saves learning notes for a user's favorite books.</p> <p>Parameters: - None.</p> <p>Return: - RenderedTemplate: Renders the <code>learnings.html</code> template with the user's favorites and saved notes. - Redirect: Redirects to the login page (<code>/login</code>) if the user is not logged in. - Redirect: Redirects back to the learnings page after saving notes.</p> <p>Tests: - Test 1: Display Learnings   - Input: Call <code>learnings()</code> with a GET request while logged in.   - Expected Outcome: The function retrieves and displays the user's favorite books and any saved learning notes.</p> <ul> <li>Test 2: Save Learning Note</li> <li>Input: Call <code>learnings()</code> with a POST request containing a book ISBN and a learning note.</li> <li>Expected Outcome: The function saves the note for the specified book, logs the action,      and redirects to the <code>learnings</code> page.</li> </ul> Source code in <code>app.py</code> <pre><code>@app.route('/learnings', methods=['GET', 'POST'])\ndef learnings():\n    \"\"\"\n    Label: Learnings Function\n\n    Short Description:\n    Displays and saves learning notes for a user's favorite books.\n\n    Parameters:\n    - None.\n\n    Return:\n    - RenderedTemplate: Renders the `learnings.html` template with the user's favorites and saved notes.\n    - Redirect: Redirects to the login page (`/login`) if the user is not logged in.\n    - Redirect: Redirects back to the learnings page after saving notes.\n\n    Tests:\n    - Test 1: Display Learnings\n      - Input: Call `learnings()` with a GET request while logged in.\n      - Expected Outcome: The function retrieves and displays the user's favorite books and any saved learning notes.\n\n    - Test 2: Save Learning Note\n      - Input: Call `learnings()` with a POST request containing a book ISBN and a learning note.\n      - Expected Outcome: The function saves the note for the specified book, logs the action, \n        and redirects to the `learnings` page.\n    \"\"\"\n    user_id = session.get('user_id')\n    if not user_id:\n        logging.warning(\"Unauthorized access to learnings.\")\n        return redirect('/login')\n\n    if request.method == 'POST':\n        book_isbn = request.form['book_isbn']\n        learning = request.form['learning']\n\n        json_storage.save_learning(user_id, book_isbn, learning)\n        logging.info(\n            \"Saved learning for book with ISBN %s for user %s.\",\n            book_isbn, user_id\n        )\n\n        return redirect('/learnings')\n\n    favorites = json_storage.load_user_favorites(user_id)\n    return render_template('learnings.html', favorites=favorites)\n</code></pre>"},{"location":"docs/reference/app/#app.login","title":"<code>login()</code>","text":"<p>Label: Login Function</p> <p>Short Description: Handles user login by displaying the login form and authenticating user credentials.</p> <p>Parameters: - None.</p> <p>Return: - RenderedTemplate: Displays the login form (<code>login.html</code>) if the request method is GET. - Redirect: Redirects to the homepage (<code>/</code>) if login is successful (POST request). - String: Returns an error message if login fails due to incorrect username or password.</p> <p>Tests: - Test 1: Display Login Form   - Input: Call <code>login()</code> with a GET request.   - Expected Outcome: The function returns the <code>login.html</code> template for the user to fill out.</p> <ul> <li>Test 2: Successful Login</li> <li>Input: Call <code>login()</code> with a POST request containing valid username and password.</li> <li>Expected Outcome: The function authenticates the user, sets the session with the user ID, and redirects to the homepage.</li> </ul> Source code in <code>app.py</code> <pre><code>@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    \"\"\"\n    Label: Login Function\n\n    Short Description:\n    Handles user login by displaying the login form and authenticating user credentials.\n\n    Parameters:\n    - None.\n\n    Return:\n    - RenderedTemplate: Displays the login form (`login.html`) if the request method is GET.\n    - Redirect: Redirects to the homepage (`/`) if login is successful (POST request).\n    - String: Returns an error message if login fails due to incorrect username or password.\n\n    Tests:\n    - Test 1: Display Login Form\n      - Input: Call `login()` with a GET request.\n      - Expected Outcome: The function returns the `login.html` template for the user to fill out.\n\n    - Test 2: Successful Login\n      - Input: Call `login()` with a POST request containing valid username and password.\n      - Expected Outcome: The function authenticates the user, sets the session with the user ID, and redirects to the homepage.\n    \"\"\"\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n\n        # Authenticate the user\n        user = database.authenticate_user(username, password)\n        if user:\n            session['user_id'] = user[0]  # Store user ID in session\n            logging.info(\"User '%s' logged in successfully.\", username)\n            return redirect('/')\n\n        logging.warning(\"Login attempt failed for username '%s'.\", username)\n        return 'Login failed. Please check your username and password.'\n\n    logging.info(\"Login form accessed.\")\n    return render_template('login.html')\n</code></pre>"},{"location":"docs/reference/app/#app.logout","title":"<code>logout()</code>","text":"<p>Label: Logout Function</p> <p>Short Description: Logs out the current user by removing their session data and redirects them to the homepage.</p> <p>Parameters: - None.</p> <p>Return: - Redirect: Redirects the user to the homepage (<code>/</code>).</p> <p>Tests: - Test 1: User Logout   - Input: Call <code>logout()</code> with a user currently logged in.   - Expected Outcome: The user session is cleared, and the user is redirected to the homepage.</p> <ul> <li>Test 2: Logout Without Active Session</li> <li>Input: Call <code>logout()</code> when no user is logged in.</li> <li>Expected Outcome: The function executes without error and redirects to the homepage.</li> </ul> Source code in <code>app.py</code> <pre><code>@app.route('/logout')\ndef logout():\n    \"\"\"\n    Label: Logout Function\n\n    Short Description:\n    Logs out the current user by removing their session data and redirects them to the homepage.\n\n    Parameters:\n    - None.\n\n    Return:\n    - Redirect: Redirects the user to the homepage (`/`).\n\n    Tests:\n    - Test 1: User Logout\n      - Input: Call `logout()` with a user currently logged in.\n      - Expected Outcome: The user session is cleared, and the user is redirected to the homepage.\n\n    - Test 2: Logout Without Active Session\n      - Input: Call `logout()` when no user is logged in.\n      - Expected Outcome: The function executes without error and redirects to the homepage.\n    \"\"\"\n    session.pop('user_id', None)\n    logging.info(\"User logged out.\")\n    return redirect('/')\n</code></pre>"},{"location":"docs/reference/app/#app.register","title":"<code>register()</code>","text":"<p>Label: Register Function</p> <p>Short Description: Handles user registration by displaying the registration form and processing user input to create a new account.</p> <p>Parameters: - None.</p> <p>Return: - RenderedTemplate: Displays the registration form (<code>register.html</code>) if the request method is GET or if registration fails. - Redirect: Redirects to the login page (<code>/login</code>) if registration is successful (POST request).</p> <p>Tests:</p> <ul> <li>Test 1: Successful Registration</li> <li>Input: Call <code>register()</code> with a POST request containing a valid username and password.</li> <li> <p>Expected Outcome: The function registers the user, saves their credentials, and redirects to the <code>/login</code> page.</p> </li> <li> <p>Test 2: Duplicate Registration</p> </li> <li>Input: Call <code>register()</code> with a POST request using a username that already exists.</li> <li>Expected Outcome: The function displays an error message in the <code>register.html</code> template.</li> </ul> Source code in <code>app.py</code> <pre><code>@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    \"\"\"\n    Label: Register Function\n\n    Short Description:\n    Handles user registration by displaying the registration form and processing user input to create a new account.\n\n    Parameters:\n    - None.\n\n    Return:\n    - RenderedTemplate: Displays the registration form (`register.html`) if the request method is GET or if registration fails.\n    - Redirect: Redirects to the login page (`/login`) if registration is successful (POST request).\n\n    Tests:\n\n    - Test 1: Successful Registration\n      - Input: Call `register()` with a POST request containing a valid username and password.\n      - Expected Outcome: The function registers the user, saves their credentials, and redirects to the `/login` page.\n\n    - Test 2: Duplicate Registration\n      - Input: Call `register()` with a POST request using a username that already exists.\n      - Expected Outcome: The function displays an error message in the `register.html` template.\n    \"\"\"\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n\n        # Attempt to register the user and check the result\n        registration_success = database.register_user(username, password)\n        if registration_success:\n            logging.info(\"User '%s' registered successfully.\", username)\n            return redirect('/login')\n        else:\n            # Show an error message if registration failed due to a duplicate username\n            return render_template('register.html', error=\"Username already exists. Please choose another one.\")\n\n    logging.info(\"Registration form accessed.\")\n    return render_template('register.html')\n</code></pre>"},{"location":"docs/reference/app/#app.remove_favorites_view","title":"<code>remove_favorites_view()</code>","text":"<p>Label: Remove Favorites Function</p> <p>Short Description: Handles removing selected favorite books for a user based on provided ISBNs.</p> <p>Parameters: - None.</p> <p>Return: - Redirect: Redirects to the favorites page (<code>/favorites</code>) after successful removal. - Redirect: Redirects to the login page (<code>/login</code>) if the user is not logged in.</p> <p>Tests: - Test 1: Remove Selected Favorites   - Input: Call <code>remove_favorites_view()</code> with a POST request and a list of selected ISBNs.   - Expected Outcome: The function removes the books with the provided ISBNs from the user's favorites      and redirects to the favorites page.</p> <ul> <li>Test 2: Unauthorized Removal Attempt</li> <li>Input: Call <code>remove_favorites_view()</code> without being logged in.</li> <li>Expected Outcome: The function logs a warning and redirects the user to the login page.</li> </ul> Source code in <code>app.py</code> <pre><code>@app.route('/remove_favorites', methods=['POST'])\ndef remove_favorites_view():\n    \"\"\"\n    Label: Remove Favorites Function\n\n    Short Description:\n    Handles removing selected favorite books for a user based on provided ISBNs.\n\n    Parameters:\n    - None.\n\n    Return:\n    - Redirect: Redirects to the favorites page (`/favorites`) after successful removal.\n    - Redirect: Redirects to the login page (`/login`) if the user is not logged in.\n\n    Tests:\n    - Test 1: Remove Selected Favorites\n      - Input: Call `remove_favorites_view()` with a POST request and a list of selected ISBNs.\n      - Expected Outcome: The function removes the books with the provided ISBNs from the user's favorites \n        and redirects to the favorites page.\n\n    - Test 2: Unauthorized Removal Attempt\n      - Input: Call `remove_favorites_view()` without being logged in.\n      - Expected Outcome: The function logs a warning and redirects the user to the login page.\n    \"\"\"\n    if 'user_id' in session:\n        user_id = session['user_id']\n        selected_isbns = request.form.getlist('selected_books')\n\n        if selected_isbns:\n            json_storage.remove_favorites(user_id, selected_isbns)\n            logging.info(\n                \"Removed favorites for user %s: %s\", user_id, selected_isbns\n            )\n\n        return redirect(url_for('favorites'))\n\n    logging.warning(\"Unauthorized attempt to remove favorites.\")\n    return redirect(url_for('login'))\n</code></pre>"},{"location":"docs/reference/app/#app.search","title":"<code>search()</code>","text":"<p>Label: Search Function</p> <p>Short Description: Displays the search form and processes the user's search query to find books  using the Google Books API.</p> <p>Parameters: - None.</p> <p>Return: - RenderedTemplate: Displays the search results page (<code>results.html</code>) if the request method is POST    and the search is successful. - RenderedTemplate: Displays the search form (<code>search.html</code>) if the request method is GET. - Redirect: Redirects to the login page (<code>/login</code>) if the user is not logged in.</p> <p>Tests: - Test 1: Display Search Form   - Input: Call <code>search()</code> with a GET request while logged in.   - Expected Outcome: The function returns the <code>search.html</code> template for the user to enter search criteria.</p> <ul> <li>Test 2: Search Books with Valid Input</li> <li>Input: Call <code>search()</code> with a POST request containing a valid field of interest and specific topic.</li> <li>Expected Outcome: The function retrieves books from the Google Books API, logs the search action, and      displays the <code>results.html</code> template with the search results.</li> </ul> Source code in <code>app.py</code> <pre><code>@app.route('/search', methods=['GET', 'POST'])\ndef search():\n    \"\"\"\n    Label: Search Function\n\n    Short Description:\n    Displays the search form and processes the user's search query to find books \n    using the Google Books API.\n\n    Parameters:\n    - None.\n\n    Return:\n    - RenderedTemplate: Displays the search results page (`results.html`) if the request method is POST \n      and the search is successful.\n    - RenderedTemplate: Displays the search form (`search.html`) if the request method is GET.\n    - Redirect: Redirects to the login page (`/login`) if the user is not logged in.\n\n    Tests:\n    - Test 1: Display Search Form\n      - Input: Call `search()` with a GET request while logged in.\n      - Expected Outcome: The function returns the `search.html` template for the user to enter search criteria.\n\n    - Test 2: Search Books with Valid Input\n      - Input: Call `search()` with a POST request containing a valid field of interest and specific topic.\n      - Expected Outcome: The function retrieves books from the Google Books API, logs the search action, and \n        displays the `results.html` template with the search results.\n    \"\"\"\n    if 'user_id' not in session:\n        logging.warning(\"Unauthorized access to search page.\")\n        return redirect('/login')  # User must be logged in\n\n    if request.method == 'POST':\n        field_of_interest = request.form['field']\n        specific_topic = request.form.get('topic', '')\n\n        # Retrieve books from the Google Books API based on search criteria\n        books = google_books_api.search_books(field_of_interest, specific_topic)\n        logging.info(\n            \"Search query '%s' with topic '%s' returned %d results.\",\n            field_of_interest, specific_topic, len(books)\n        )\n        return render_template('results.html', books=books, category=field_of_interest)\n\n    logging.info(\"Search form accessed.\")\n    return render_template('search.html')\n</code></pre>"},{"location":"docs/reference/app/#app.update_current_page","title":"<code>update_current_page()</code>","text":"<p>Label: Update Favorite Page Function</p> <p>Short Description: Updates the current page for a user's favorite book and updates the user's reading streak.</p> <p>Parameters: - None.</p> <p>Return: - RenderedTemplate: Renders the <code>bookmarks.html</code> template with the updated favorites list. - Redirect: Redirects to the login page (<code>/login</code>) if the user is not logged in. - Tuple: Returns a message with a 400 status code if the provided page number is invalid.</p> <p>Tests: - Test 1: Update Favorite Page with Valid Data   - Input: Call <code>update_current_page()</code> with a valid book ISBN and page number.   - Expected Outcome: The function updates the book's current page, updates the reading streak,      and displays the updated bookmarks.</p> <ul> <li>Test 2: Unauthorized Access</li> <li>Input: Call <code>update_current_page()</code> an user is not logged in.</li> <li>Expected Outcome: The function redirects the user to the login page (<code>/login</code>)</li> </ul> Source code in <code>app.py</code> <pre><code>@app.route('/update_current_page', methods=['POST'])\ndef update_current_page():\n    \"\"\"\n    Label: Update Favorite Page Function\n\n    Short Description:\n    Updates the current page for a user's favorite book and updates the user's reading streak.\n\n    Parameters:\n    - None.\n\n    Return:\n    - RenderedTemplate: Renders the `bookmarks.html` template with the updated favorites list.\n    - Redirect: Redirects to the login page (`/login`) if the user is not logged in.\n    - Tuple: Returns a message with a 400 status code if the provided page number is invalid.\n\n    Tests:\n    - Test 1: Update Favorite Page with Valid Data\n      - Input: Call `update_current_page()` with a valid book ISBN and page number.\n      - Expected Outcome: The function updates the book's current page, updates the reading streak, \n        and displays the updated bookmarks.\n\n    - Test 2: Unauthorized Access\n      - Input: Call `update_current_page()` an user is not logged in.\n      - Expected Outcome: The function redirects the user to the login page (`/login`)\n    \"\"\"\n    user_id = session.get('user_id')\n    if not user_id:\n        logging.warning(\"Unauthorized attempt to update favorite page.\")\n        return redirect('/login')  # User must be logged in\n\n    # Get data from the form\n    book_isbn = request.form['book_isbn']\n    current_page = request.form['current_page']\n\n    try:\n        current_page = int(current_page)  # Ensure page number is a valid integer\n    except ValueError:\n        logging.error(\"Invalid page number '%s' provided.\", current_page)\n        return \"Invalid page number\", 400\n\n    # Update the current page in the JSON file\n    json_storage.update_current_page(user_id, book_isbn, current_page)\n    logging.info(\n        \"Updated page to %d for book with ISBN %s for user %s.\",\n        current_page, book_isbn, user_id\n    )\n\n    # Update the user's reading streak\n    database.update_reading_streak(user_id)\n\n    # Reload the page with the updated data\n    favorites = json_storage.load_user_favorites(user_id)\n    return render_template('bookmarks.html', favorites=favorites)\n</code></pre>"},{"location":"docs/reference/database/","title":"Database Module","text":"<p>Database Module</p> <ul> <li>This module handles the SQLite database connection and operations such as user registration, authentication, and table creation for a book recommendation application.</li> </ul> <p>Author: Paul, Tim, Thang Date: 06.10.2024 Version: 0.1.0 License: Free</p>"},{"location":"docs/reference/database/#backend.database.authenticate_user","title":"<code>authenticate_user(username, password)</code>","text":"<p>Label: Authenticate User Function</p> <p>Short Description: Authenticates the user by checking the hashed username and password against stored values in the database.</p> <p>Parameters: - username (str): The user's username. - password (str): The user's password.</p> <p>Return: - tuple or None: Returns the user tuple (id, username, password) if authentication is successful, otherwise None.</p> <p>Tests: - Test 1: Successful Authentication   - Input: Correct username and password.   - Expected Outcome: Returns user information if credentials match and logs an info message.</p> <ul> <li>Test 2: Failed Authentication</li> <li>Input: Incorrect username or password.</li> <li>Expected Outcome: Returns None and logs a warning message about the failed authentication attempt.</li> </ul> Source code in <code>backend/database.py</code> <pre><code>def authenticate_user(username, password):\n    \"\"\"\n    Label: Authenticate User Function\n\n    Short Description:\n    Authenticates the user by checking the hashed username and password against stored values in the database.\n\n    Parameters:\n    - username (str): The user's username.\n    - password (str): The user's password.\n\n    Return:\n    - tuple or None: Returns the user tuple (id, username, password) if authentication is successful, otherwise None.\n\n    Tests:\n    - Test 1: Successful Authentication\n      - Input: Correct username and password.\n      - Expected Outcome: Returns user information if credentials match and logs an info message.\n\n    - Test 2: Failed Authentication\n      - Input: Incorrect username or password.\n      - Expected Outcome: Returns None and logs a warning message about the failed authentication attempt.\n    \"\"\"\n    try:\n        conn = connect_to_db()\n        cur = conn.cursor()\n        cur.execute(\"SELECT id, username, password FROM users\")\n        users = cur.fetchall()\n    except sqlite3.Error as e:\n        logging.error(\"Error during authentication: %s\", e)\n        return None\n    finally:\n        conn.close()\n\n    for user in users:\n        stored_username_hash = user[1]\n        if check_username_hash(stored_username_hash, username):\n            if check_password(user[2], password):\n                logging.info(\"User '%s' successfully authenticated.\", username)\n                return user\n\n    logging.warning(\"Authentication failed for user '%s'.\", username)\n    return None\n</code></pre>"},{"location":"docs/reference/database/#backend.database.check_password","title":"<code>check_password(hashed_password, password)</code>","text":"<p>Label: Check Password Function</p> <p>Short Description: Verifies a plain text password against its hashed version using bcrypt.</p> <p>Parameters: - hashed_password (str): The hashed password retrieved from the database. - password (str): The plain text password to verify.</p> <p>Return: - bool: True if the password matches the hashed version, False otherwise.</p> <p>Tests: - Test 1: Correct Password Verification   - Input: A valid password and its corresponding hashed version.   - Expected Outcome: Returns True, indicating that the password matches the hash.</p> <ul> <li>Test 2: Incorrect Password Verification</li> <li>Input: An invalid password and a stored hashed version.</li> <li>Expected Outcome: Returns False, indicating that the password does not match the hash.</li> </ul> Source code in <code>backend/database.py</code> <pre><code>def check_password(hashed_password, password):\n    \"\"\"\n    Label: Check Password Function\n\n    Short Description:\n    Verifies a plain text password against its hashed version using bcrypt.\n\n    Parameters:\n    - hashed_password (str): The hashed password retrieved from the database.\n    - password (str): The plain text password to verify.\n\n    Return:\n    - bool: True if the password matches the hashed version, False otherwise.\n\n    Tests:\n    - Test 1: Correct Password Verification\n      - Input: A valid password and its corresponding hashed version.\n      - Expected Outcome: Returns True, indicating that the password matches the hash.\n\n    - Test 2: Incorrect Password Verification\n      - Input: An invalid password and a stored hashed version.\n      - Expected Outcome: Returns False, indicating that the password does not match the hash.\n    \"\"\"\n    return bcrypt.checkpw(password.encode('utf-8'), hashed_password.encode('utf-8'))\n</code></pre>"},{"location":"docs/reference/database/#backend.database.check_username_hash","title":"<code>check_username_hash(stored_hash, username)</code>","text":"<p>Label: Check Username Hash Function</p> <p>Short Description: Verifies if the SHA-256 hash of a provided username matches the stored hash.</p> <p>Parameters: - stored_hash (str): The stored hash value from the database. - username (str): The plain text username to verify.</p> <p>Return: - bool: True if the hash of the username matches the stored hash, False otherwise.</p> <p>Tests: - Test 1: Correct Hash Match   - Input: A stored hash and its corresponding plain text username.   - Expected Outcome: Returns True, indicating that the hash matches the stored value.</p> <ul> <li>Test 2: Incorrect Hash Match</li> <li>Input: A stored hash and a different plain text username.</li> <li>Expected Outcome: Returns False, indicating that the hash does not match the stored value.</li> </ul> Source code in <code>backend/database.py</code> <pre><code>def check_username_hash(stored_hash, username):\n    \"\"\"\n    Label: Check Username Hash Function\n\n    Short Description:\n    Verifies if the SHA-256 hash of a provided username matches the stored hash.\n\n    Parameters:\n    - stored_hash (str): The stored hash value from the database.\n    - username (str): The plain text username to verify.\n\n    Return:\n    - bool: True if the hash of the username matches the stored hash, False otherwise.\n\n    Tests:\n    - Test 1: Correct Hash Match\n      - Input: A stored hash and its corresponding plain text username.\n      - Expected Outcome: Returns True, indicating that the hash matches the stored value.\n\n    - Test 2: Incorrect Hash Match\n      - Input: A stored hash and a different plain text username.\n      - Expected Outcome: Returns False, indicating that the hash does not match the stored value.\n    \"\"\"\n    return stored_hash == hash_username(username)\n</code></pre>"},{"location":"docs/reference/database/#backend.database.connect_to_db","title":"<code>connect_to_db()</code>","text":"<p>Label: Connect to Database Function</p> <p>Short Description: Establishes a connection to the SQLite database 'database.db'.</p> <p>Parameters: - None.</p> <p>Return: - Connection: SQLite connection object to 'database.db'.</p> <p>Tests: - Test 1: Successful Database Connection   - Input: Call <code>connect_to_db()</code> when the SQLite database file is available.   - Expected Outcome: The function returns a connection object, and an info log is created for the successful connection.</p> <ul> <li>Test 2: Failed Database Connection</li> <li>Input: Call <code>connect_to_db()</code> with an invalid database path or when the database file is inaccessible.</li> <li>Expected Outcome: The function logs an error message and raises an <code>sqlite3.Error</code>.</li> </ul> Source code in <code>backend/database.py</code> <pre><code>def connect_to_db():\n    \"\"\"\n    Label: Connect to Database Function\n\n    Short Description:\n    Establishes a connection to the SQLite database 'database.db'.\n\n    Parameters:\n    - None.\n\n    Return:\n    - Connection: SQLite connection object to 'database.db'.\n\n\n    Tests:\n    - Test 1: Successful Database Connection\n      - Input: Call `connect_to_db()` when the SQLite database file is available.\n      - Expected Outcome: The function returns a connection object, and an info log is created for the successful connection.\n\n    - Test 2: Failed Database Connection\n      - Input: Call `connect_to_db()` with an invalid database path or when the database file is inaccessible.\n      - Expected Outcome: The function logs an error message and raises an `sqlite3.Error`.\n    \"\"\"\n    try:\n        conn = sqlite3.connect('database.db')\n        logging.info(\"Database connection established successfully.\")\n        return conn\n    except sqlite3.Error as e:\n        logging.error(\"Database connection failed: %s\", e)\n        raise e\n</code></pre>"},{"location":"docs/reference/database/#backend.database.create_user_table","title":"<code>create_user_table()</code>","text":"<p>Label: Create User Table Function</p> <p>Short Description: Creates the 'users' table in the SQLite database if it does not already exist,  with a UNIQUE constraint on the 'username' column.</p> <p>Parameters: - None.</p> <p>Return: - None</p> <p>Tests: - Test 1: Table Creation Success   - Input: Call <code>create_user_table()</code> when the database is empty.   - Expected Outcome: The 'users' table is created successfully without raising any errors,      and a log message confirms the creation.</p> <ul> <li>Test 2: Table Already Exists</li> <li>Input: Call <code>create_user_table()</code> when the 'users' table already exists.</li> <li>Expected Outcome: The function completes without raising errors, and the existing table      is not affected.</li> </ul> Source code in <code>backend/database.py</code> <pre><code>def create_user_table():\n    \"\"\"\n    Label: Create User Table Function\n\n    Short Description:\n    Creates the 'users' table in the SQLite database if it does not already exist, \n    with a UNIQUE constraint on the 'username' column.\n\n    Parameters:\n    - None.\n\n    Return:\n    - None\n\n    Tests:\n    - Test 1: Table Creation Success\n      - Input: Call `create_user_table()` when the database is empty.\n      - Expected Outcome: The 'users' table is created successfully without raising any errors, \n        and a log message confirms the creation.\n\n    - Test 2: Table Already Exists\n      - Input: Call `create_user_table()` when the 'users' table already exists.\n      - Expected Outcome: The function completes without raising errors, and the existing table \n        is not affected.\n    \"\"\"\n    conn = connect_to_db()\n    cur = conn.cursor()\n    try:\n        cur.execute('''\n            CREATE TABLE IF NOT EXISTS users (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                username TEXT NOT NULL UNIQUE,\n                password TEXT NOT NULL,\n                last_read_date DATE,\n                current_streak INTEGER DEFAULT 0,\n                longest_streak INTEGER DEFAULT 0\n            )\n        ''')\n        logging.info(\"Table 'users' created or already exists with UNIQUE constraint on 'username'.\")\n        conn.commit()\n    except sqlite3.Error as e:\n        logging.error(\"Error creating 'users' table: %s\", e)\n        raise e\n    finally:\n        conn.close()\n</code></pre>"},{"location":"docs/reference/database/#backend.database.get_user_streak_data","title":"<code>get_user_streak_data(user_id)</code>","text":"<p>Label: Get User Streak Data Function</p> <p>Short Description: Retrieves the user's streak data from the database, including the current streak,  longest streak, and the last read date.</p> <p>Parameters: - user_id (int): The ID of the user.</p> <p>Return: - dict: A dictionary containing 'current_streak', 'longest_streak', and 'last_read_date'.         If no data is found or an error occurs, returns default values.</p> <p>Tests: - Test 1: Retrieve Existing Streak Data   - Input: A valid user ID with existing streak data.   - Expected Outcome: Returns a dictionary with the user's actual 'current_streak',      'longest_streak', and 'last_read_date'.</p> <ul> <li>Test 2: No Streak Data Found</li> <li>Input: A user ID that does not exist in the database.</li> <li>Expected Outcome: Returns a dictionary with 'current_streak' set to 0,      'longest_streak' set to 0, and 'last_read_date' as None.</li> </ul> Source code in <code>backend/database.py</code> <pre><code>def get_user_streak_data(user_id):\n    \"\"\"\n    Label: Get User Streak Data Function\n\n    Short Description:\n    Retrieves the user's streak data from the database, including the current streak, \n    longest streak, and the last read date.\n\n    Parameters:\n    - user_id (int): The ID of the user.\n\n    Return:\n    - dict: A dictionary containing 'current_streak', 'longest_streak', and 'last_read_date'.\n            If no data is found or an error occurs, returns default values.\n\n    Tests:\n    - Test 1: Retrieve Existing Streak Data\n      - Input: A valid user ID with existing streak data.\n      - Expected Outcome: Returns a dictionary with the user's actual 'current_streak', \n        'longest_streak', and 'last_read_date'.\n\n    - Test 2: No Streak Data Found\n      - Input: A user ID that does not exist in the database.\n      - Expected Outcome: Returns a dictionary with 'current_streak' set to 0, \n        'longest_streak' set to 0, and 'last_read_date' as None.\n\n    \"\"\"\n    conn = connect_to_db()\n    cur = conn.cursor()\n\n    try:\n        cur.execute(\n            \"SELECT current_streak, longest_streak, last_read_date FROM users WHERE id = ?\",\n            (user_id,)\n        )\n        result = cur.fetchone()\n\n        if result:\n            current_streak, longest_streak, last_read_date = result\n            return {\n                \"current_streak\": current_streak,\n                \"longest_streak\": longest_streak,\n                \"last_read_date\": last_read_date\n            }\n\n        # No data found for the user\n        return {\n            \"current_streak\": 0,\n            \"longest_streak\": 0,\n            \"last_read_date\": None\n        }\n    except sqlite3.Error as e:\n        logging.error(\"Error retrieving streak data for user %s: %s\", user_id, e)\n        return {\n            \"current_streak\": 0,\n            \"longest_streak\": 0,\n            \"last_read_date\": None\n        }\n    finally:\n        conn.close()\n</code></pre>"},{"location":"docs/reference/database/#backend.database.hash_password","title":"<code>hash_password(password)</code>","text":"<p>Label: Hash Password Function</p> <p>Short Description: Hashes a given password using bcrypt to ensure secure storage.</p> <p>Parameters: - password (str): The password to be hashed.</p> <p>Return: - str: The hashed password as a string.</p> <p>Tests: - Test 1: Hash Generation   - Input: A sample password.   - Expected Outcome: Returns a bcrypt hash string that is different from the input password.</p> <ul> <li>Test 2: Consistent Output</li> <li>Input: Two identical passwords.</li> <li>Expected Outcome: Generates different hashes due to unique salts, ensuring that the hashes are not the same even for identical passwords.</li> </ul> Source code in <code>backend/database.py</code> <pre><code>def hash_password(password):\n    \"\"\"\n    Label: Hash Password Function\n\n    Short Description:\n    Hashes a given password using bcrypt to ensure secure storage.\n\n    Parameters:\n    - password (str): The password to be hashed.\n\n    Return:\n    - str: The hashed password as a string.\n\n    Tests:\n    - Test 1: Hash Generation\n      - Input: A sample password.\n      - Expected Outcome: Returns a bcrypt hash string that is different from the input password.\n\n    - Test 2: Consistent Output\n      - Input: Two identical passwords.\n      - Expected Outcome: Generates different hashes due to unique salts, ensuring that the hashes are not the same even for identical passwords.\n    \"\"\"\n    salt = bcrypt.gensalt()\n    hashed = bcrypt.hashpw(password.encode('utf-8'), salt)\n    return hashed.decode('utf-8')\n</code></pre>"},{"location":"docs/reference/database/#backend.database.hash_username","title":"<code>hash_username(username)</code>","text":"<p>Label: Hash Username Function</p> <p>Short Description: Hashes a given username using the SHA-256 algorithm for secure storage.</p> <p>Parameters: - username (str): The username to be hashed.</p> <p>Return: - str: The SHA-256 hash of the username as a hexadecimal string.</p> <p>Tests: - Test 1: Hash Generation   - Input: A sample username.   - Expected Outcome: Returns a SHA-256 hash string that is different from the input username.</p> <ul> <li>Test 2: Consistent Hash for Same Input</li> <li>Input: Call <code>hash_username()</code> twice with the same username.</li> <li>Expected Outcome: Both calls should return the same hash string, verifying that the function produces consistent results.</li> </ul> Source code in <code>backend/database.py</code> <pre><code>def hash_username(username):\n    \"\"\"\n    Label: Hash Username Function\n\n    Short Description:\n    Hashes a given username using the SHA-256 algorithm for secure storage.\n\n    Parameters:\n    - username (str): The username to be hashed.\n\n    Return:\n    - str: The SHA-256 hash of the username as a hexadecimal string.\n\n    Tests:\n    - Test 1: Hash Generation\n      - Input: A sample username.\n      - Expected Outcome: Returns a SHA-256 hash string that is different from the input username.\n\n    - Test 2: Consistent Hash for Same Input\n      - Input: Call `hash_username()` twice with the same username.\n      - Expected Outcome: Both calls should return the same hash string, verifying that the function produces consistent results.\n    \"\"\"\n\n    return hashlib.sha256(username.encode('utf-8')).hexdigest()\n</code></pre>"},{"location":"docs/reference/database/#backend.database.register_user","title":"<code>register_user(username, password)</code>","text":"<p>Registers a new user by storing the hashed username and password in the database.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The user's username.</p> required <code>password</code> <code>str</code> <p>The user's password.</p> required Return <p>bool: True if registration is successful, False if a duplicate username exists.</p> Tests <ol> <li> <p>Successful Registration:</p> <ul> <li>Input: Valid username and password.</li> <li>Expected Outcome: User is added to the database, and no errors occur.</li> </ul> </li> <li> <p>Duplicate Registration Handling:</p> <ul> <li>Input: Register a user with a username that already exists.</li> <li>Expected Outcome: An appropriate error message is logged, and no duplicate entries are created.</li> </ul> </li> </ol> Source code in <code>backend/database.py</code> <pre><code>def register_user(username, password):\n    \"\"\"\n    Registers a new user by storing the hashed username and password in the database.\n\n    Args:\n        username (str): The user's username.\n        password (str): The user's password.\n\n    Return:\n        bool: True if registration is successful, False if a duplicate username exists.\n\n    Tests:\n        1. **Successful Registration**:\n            - Input: Valid username and password.\n            - Expected Outcome: User is added to the database, and no errors occur.\n\n        2. **Duplicate Registration Handling**:\n            - Input: Register a user with a username that already exists.\n            - Expected Outcome: An appropriate error message is logged, and no duplicate entries are created.\n    \"\"\"\n    hashed_username = hash_username(username)\n    hashed_password = hash_password(password)\n    conn = connect_to_db()\n    cur = conn.cursor()\n\n    try:\n        # Check if the user already exists\n        cur.execute(\"SELECT * FROM users WHERE username = ?\", (hashed_username,))\n        existing_user = cur.fetchone()\n        if existing_user:\n            logging.warning(\"Attempted to register a duplicate user '%s'.\", username)\n            return False\n\n        # Insert the new user if no duplicate is found\n        cur.execute('''\n            INSERT INTO users (username, password) \n            VALUES (?, ?)\n        ''', (hashed_username, hashed_password))\n        conn.commit()\n        logging.info(\"User '%s' registered successfully.\", username)\n        return True\n    except sqlite3.Error as e:\n        logging.error(\"Error registering user '%s': %s\", username, e)\n        raise e\n    finally:\n        conn.close()\n</code></pre>"},{"location":"docs/reference/database/#backend.database.update_reading_streak","title":"<code>update_reading_streak(user_id)</code>","text":"<p>Label: Update Reading Streak Function</p> <p>Short Description: Updates the user's reading streak based on their last reading date.  Adjusts the current streak, longest streak, and updates the last read date in the database.</p> <p>Parameters: - user_id (int): The ID of the user.</p> <p>Return: - dict: A dictionary containing the user's updated 'current_streak', 'longest_streak',    'last_read_date', and 'streak_status'. If an error occurs, returns default values    with 'streak_status' set to 'error'.</p> <p>Tests: - Test 1: Streak Continuation   - Input: A user who read yesterday.   - Expected Outcome: The 'current_streak' is incremented by 1, and 'streak_status' is 'continued'.</p> <ul> <li>Test 2: Streak Reset</li> <li>Input: A user who has not read for several days.</li> <li>Expected Outcome: The 'current_streak' is reset to 1, and 'streak_status' is 'reset'.</li> </ul> Source code in <code>backend/database.py</code> <pre><code>def update_reading_streak(user_id):\n    \"\"\"\n    Label: Update Reading Streak Function\n\n    Short Description:\n    Updates the user's reading streak based on their last reading date. \n    Adjusts the current streak, longest streak, and updates the last read date in the database.\n\n    Parameters:\n    - user_id (int): The ID of the user.\n\n    Return:\n    - dict: A dictionary containing the user's updated 'current_streak', 'longest_streak', \n      'last_read_date', and 'streak_status'. If an error occurs, returns default values \n      with 'streak_status' set to 'error'.\n\n    Tests:\n    - Test 1: Streak Continuation\n      - Input: A user who read yesterday.\n      - Expected Outcome: The 'current_streak' is incremented by 1, and 'streak_status' is 'continued'.\n\n    - Test 2: Streak Reset\n      - Input: A user who has not read for several days.\n      - Expected Outcome: The 'current_streak' is reset to 1, and 'streak_status' is 'reset'.\n\n    \"\"\"\n    conn = connect_to_db()\n    cur = conn.cursor()\n\n    try:\n        cur.execute(\n            \"SELECT last_read_date, current_streak, longest_streak FROM users WHERE id = ?\",\n            (user_id,)\n        )\n        user_data = cur.fetchone()\n\n        last_read_date_str, current_streak, longest_streak = user_data if user_data else (None, 0, 0)\n        last_read_date = datetime.strptime(last_read_date_str, '%Y-%m-%d').date() if last_read_date_str else None\n\n        today = datetime.now().date()\n\n        if last_read_date == today:\n            streak_status = \"unchanged\"\n        elif last_read_date == today - timedelta(days=1):\n            current_streak += 1\n            streak_status = \"continued\"\n        else:\n            current_streak = 1\n            streak_status = \"reset\"\n\n        if current_streak &gt; longest_streak:\n            longest_streak = current_streak\n\n        cur.execute(\n            \"UPDATE users SET last_read_date = ?, current_streak = ?, longest_streak = ? WHERE id = ?\",\n            (today.strftime('%Y-%m-%d'), current_streak, longest_streak, user_id)\n        )\n        conn.commit()\n\n        logging.info(\n            \"User %s streak updated: Current streak is %d, Longest streak is %d, Status: %s.\",\n            user_id, current_streak, longest_streak, streak_status\n        )\n        return {\n            \"current_streak\": current_streak,\n            \"longest_streak\": longest_streak,\n            \"last_read_date\": today,\n            \"streak_status\": streak_status\n        }\n\n    except sqlite3.Error as e:\n        logging.error(\"Database error while updating reading streak for user %s: %s\", user_id, e)\n        return {\n            \"current_streak\": 0,\n            \"longest_streak\": 0,\n            \"last_read_date\": None,\n            \"streak_status\": \"error\"\n        }\n    finally:\n        conn.close()\n</code></pre>"},{"location":"docs/reference/google_books_api/","title":"Google Books API Module","text":"<p>Google Books API Module</p> <ul> <li>This module interacts with the Google Books API to search for books based on user input and retrieve book details using the ISBN.</li> </ul> <p>Author: Paul, Tim, Thang Date: 06.10.2024 Version: 0.1.0 License: Free</p>"},{"location":"docs/reference/google_books_api/#backend.google_books_api.search_books","title":"<code>search_books(field_of_interest, specific_topic)</code>","text":"<p>Searches for books based on the field of interest and specific topic using the Google Books API.</p> <p>Parameters:</p> Name Type Description Default <code>field_of_interest</code> <code>str</code> <p>The general category or subject area of interest.</p> required <code>specific_topic</code> <code>str</code> <p>An optional specific topic or subcategory within the field of interest.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list of dictionaries containing details for up to 10 books.    Each dictionary contains the following book details:   - 'title': Title of the book (str).   - 'author': Author(s) of the book (str).   - 'isbn': The ISBN of the book (str).   - 'publication_year': Year of publication (str).   - 'description': Description of the book (str).   - 'category': The category or field of interest (str).</p> Tests <ol> <li> <p>Valid Search Query:</p> <ul> <li>Input: <code>field_of_interest = \"Science\"</code>, <code>specific_topic = \"Physics\"</code></li> <li>Expected Outcome: The function should return a list of up to 10 dictionaries, each containing book details like 'title', 'author', 'isbn', etc. All fields should be populated with relevant data.</li> </ul> </li> <li> <p>Empty Specific Topic:</p> <ul> <li>Input: <code>field_of_interest = \"Wirtschaft\"</code>, <code>specific_topic = \"\"</code></li> <li>Expected Outcome: The function should return a list of up to 10 dictionaries containing fiction books without any filtering by specific topic. The books should still have their details populated correctly.</li> </ul> </li> </ol> Source code in <code>backend/google_books_api.py</code> <pre><code>def search_books(field_of_interest, specific_topic):\n    \"\"\"\n    Searches for books based on the field of interest and specific topic using the Google Books API.\n\n    Args:\n        field_of_interest (str): The general category or subject area of interest.\n        specific_topic (str): An optional specific topic or subcategory within the field of interest.\n\n    Returns:\n        list: A list of dictionaries containing details for up to 10 books. \n              Each dictionary contains the following book details:\n              - 'title': Title of the book (str).\n              - 'author': Author(s) of the book (str).\n              - 'isbn': The ISBN of the book (str).\n              - 'publication_year': Year of publication (str).\n              - 'description': Description of the book (str).\n              - 'category': The category or field of interest (str).\n\n    Tests:\n        1. Valid Search Query:\n            - Input: `field_of_interest = \"Science\"`, `specific_topic = \"Physics\"`\n            - Expected Outcome: The function should return a list of up to 10 dictionaries, each containing book details like 'title', 'author', 'isbn', etc. All fields should be populated with relevant data.\n\n        2. Empty Specific Topic:\n            - Input: `field_of_interest = \"Wirtschaft\"`, `specific_topic = \"\"`\n            - Expected Outcome: The function should return a list of up to 10 dictionaries containing fiction books without any filtering by specific topic. The books should still have their details populated correctly.\n\n    \"\"\"\n    query = f'{field_of_interest} {specific_topic}'\n    url = f'https://www.googleapis.com/books/v1/volumes?q={query}'\n\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        data = response.json()\n        logging.info(f\"Search query for '{query}' returned {len(data.get('items', []))} results.\")\n    except requests.exceptions.RequestException as e:\n        logging.error(f\"Error fetching books from Google Books API for query '{query}': {e}\")\n        return []\n\n    books = []\n    for item in data.get('items', [])[:10]:  # Limit to 10 books\n        book_info = item.get('volumeInfo', {})\n\n        # Add book details\n        books.append({\n            'title': book_info.get('title', 'N/A'),\n            'author': ', '.join(book_info.get('authors', ['N/A'])),\n            'isbn': book_info.get('industryIdentifiers', [{'identifier': 'N/A'}])[0]['identifier'],\n            'publication_year': book_info.get('publishedDate', 'N/A'),\n            'description': book_info.get('description', 'No description available'),\n            'category': field_of_interest  # Add the field of interest as the category\n        })\n\n    logging.info(f\"Successfully retrieved {len(books)} books for query '{query}'.\")\n    return books\n</code></pre>"},{"location":"docs/reference/json_storage/","title":"JSON Storage Module","text":"<p>Favorites Management Module</p> <ul> <li>This module provides functionality to manage users' favorite books using a JSON file for storage. </li> <li>Users can save their favorite books, add notes about their learning, update the current page they are on, and remove books from their favorites list.</li> </ul> <p>Author: Paul, Tim, Thang Date: 06.10.2024 Version: 0.1.0 License: Free</p>"},{"location":"docs/reference/json_storage/#backend.json_storage.load_all_favorites","title":"<code>load_all_favorites()</code>","text":"<p>Label: Load All Favorites Function</p> <p>Short Description: Loads all favorite books for each user from a JSON file.</p> <p>Parameters: - None.</p> <p>Return: - dict: A dictionary where keys are user IDs and values are lists of favorite books for each user.         Returns an empty dictionary if the file doesn't exist or is not readable.</p> <p>Tests: - Test 1: File Exists   - Input: A valid JSON file located at <code>FAVORITES_JSON_PATH</code>.   - Expected Outcome: The function should return a dictionary containing the user's favorite books      as loaded from the JSON file.</p> <ul> <li>Test 2: File Does Not Exist</li> <li>Input: A scenario where the JSON file does not exist.</li> <li>Expected Outcome: The function should return an empty dictionary and log a warning message.</li> </ul> Source code in <code>backend/json_storage.py</code> <pre><code>def load_all_favorites():\n    \"\"\"\n    Label: Load All Favorites Function\n\n    Short Description:\n    Loads all favorite books for each user from a JSON file.\n\n    Parameters:\n    - None.\n\n    Return:\n    - dict: A dictionary where keys are user IDs and values are lists of favorite books for each user.\n            Returns an empty dictionary if the file doesn't exist or is not readable.\n\n    Tests:\n    - Test 1: File Exists\n      - Input: A valid JSON file located at `FAVORITES_JSON_PATH`.\n      - Expected Outcome: The function should return a dictionary containing the user's favorite books \n        as loaded from the JSON file.\n\n    - Test 2: File Does Not Exist\n      - Input: A scenario where the JSON file does not exist.\n      - Expected Outcome: The function should return an empty dictionary and log a warning message.\n\n    \"\"\"\n    if not os.path.exists(FAVORITES_JSON_PATH):\n        logging.warning(\"%s does not exist.\", FAVORITES_JSON_PATH)\n        return {}\n\n    try:\n        with open(FAVORITES_JSON_PATH, 'r') as file:\n            logging.info(\"Loaded favorites from %s.\", FAVORITES_JSON_PATH)\n            return json.load(file)\n    except json.JSONDecodeError as e:\n        logging.error(\"Error decoding JSON file %s: %s\", FAVORITES_JSON_PATH, e)\n        return {}\n    except IOError as e:\n        logging.error(\"Failed to read file %s: %s\", FAVORITES_JSON_PATH, e)\n        return {}\n</code></pre>"},{"location":"docs/reference/json_storage/#backend.json_storage.load_user_favorites","title":"<code>load_user_favorites(user_id)</code>","text":"<p>Label: Load User Favorites Function</p> <p>Short Description: Loads the favorite books for a specific user from the JSON file.</p> <p>Parameters: - user_id (int or str): The ID of the user whose favorites should be loaded.</p> <p>Return: - list: A list of favorite books for the given user. Returns an empty list if          the user has no favorites or does not exist in the JSON data.</p> <p>Tests: - Test 1: User Has Favorites   - Input: A user ID that exists in the favorites JSON file.   - Expected Outcome: The function should return a list of favorite books for that user.</p> <ul> <li>Test 2: User Has No Favorites</li> <li>Input: A user ID that does not exist in the favorites JSON file.</li> <li>Expected Outcome: The function should return an empty list, and a log message should indicate zero favorites.</li> </ul> Source code in <code>backend/json_storage.py</code> <pre><code>def load_user_favorites(user_id):\n    \"\"\"\n    Label: Load User Favorites Function\n\n    Short Description:\n    Loads the favorite books for a specific user from the JSON file.\n\n    Parameters:\n    - user_id (int or str): The ID of the user whose favorites should be loaded.\n\n    Return:\n    - list: A list of favorite books for the given user. Returns an empty list if \n            the user has no favorites or does not exist in the JSON data.\n\n    Tests:\n    - Test 1: User Has Favorites\n      - Input: A user ID that exists in the favorites JSON file.\n      - Expected Outcome: The function should return a list of favorite books for that user.\n\n    - Test 2: User Has No Favorites\n      - Input: A user ID that does not exist in the favorites JSON file.\n      - Expected Outcome: The function should return an empty list, and a log message should indicate zero favorites.\n\n    \"\"\"\n    all_favorites = load_all_favorites()\n    favorites = all_favorites.get(str(user_id), [])\n\n    if not favorites:\n        logging.info(\"User %s has no favorites.\", user_id)\n    else:\n        logging.info(\"Loaded %d favorites for user %s.\", len(favorites), user_id)\n\n    return favorites\n</code></pre>"},{"location":"docs/reference/json_storage/#backend.json_storage.remove_favorites","title":"<code>remove_favorites(user_id, selected_isbns)</code>","text":"<p>Label: Remove Favorites Function</p> <p>Short Description: Removes selected books from a user's favorites in the JSON file.</p> <p>Parameters: - user_id (int or str): The ID of the user. - selected_isbns (list): A list of ISBNs for the books to be removed from the user's favorites.</p> <p>Return: - None</p> <p>Tests: - Test 1: Valid Removal   - Input: A user ID that exists and a list of ISBNs that are present in the user's favorites.   - Expected Outcome: The specified books should be removed from the user's favorites in the JSON file,     and a log message should confirm the removal.</p> <ul> <li>Test 2: No Matching ISBNs</li> <li>Input: A user ID that exists and a list of ISBNs that are not in the user's favorites.</li> <li>Expected Outcome: The user's favorites should remain unchanged, and a log message should indicate     that no books were removed.</li> </ul> Source code in <code>backend/json_storage.py</code> <pre><code>def remove_favorites(user_id, selected_isbns):\n    \"\"\"\n    Label: Remove Favorites Function\n\n    Short Description:\n    Removes selected books from a user's favorites in the JSON file.\n\n    Parameters:\n    - user_id (int or str): The ID of the user.\n    - selected_isbns (list): A list of ISBNs for the books to be removed from the user's favorites.\n\n    Return:\n    - None\n\n    Tests:\n    - Test 1: Valid Removal\n      - Input: A user ID that exists and a list of ISBNs that are present in the user's favorites.\n      - Expected Outcome: The specified books should be removed from the user's favorites in the JSON file,\n        and a log message should confirm the removal.\n\n    - Test 2: No Matching ISBNs\n      - Input: A user ID that exists and a list of ISBNs that are not in the user's favorites.\n      - Expected Outcome: The user's favorites should remain unchanged, and a log message should indicate\n        that no books were removed.\n    \"\"\"\n    all_favorites = load_all_favorites()\n\n    if str(user_id) in all_favorites:\n        initial_count = len(all_favorites[str(user_id)])\n        # Filter out the books whose ISBN is in the selected_isbns list\n        all_favorites[str(user_id)] = [\n            book for book in all_favorites[str(user_id)] if book['isbn'] not in selected_isbns\n        ]\n\n        final_count = len(all_favorites[str(user_id)])\n        removed_count = initial_count - final_count\n        logging.info(\n            \"Removed %d books from favorites for user %s.\",\n            removed_count,\n            user_id\n        )\n\n        # Write the updated favorites back to the JSON file\n        with open(FAVORITES_JSON_PATH, 'w') as file:\n            json.dump(all_favorites, file, indent=4)\n    else:\n        logging.warning(\"No favorites found for user %s.\", user_id)\n</code></pre>"},{"location":"docs/reference/json_storage/#backend.json_storage.save_favorite","title":"<code>save_favorite(user_id, book_details)</code>","text":"<p>Label: Save Favorite Function</p> <p>Short Description: Saves a favorite book for a user in the JSON file, ensuring no duplicates are added.</p> <p>Parameters: - user_id (int or str): The ID of the user adding a favorite. - book_details (dict): A dictionary containing the details of the book                         (e.g., title, author, ISBN).</p> <p>Return: - None</p> <p>Tests: - Test 1: Valid Save   - Input: A user ID that exists and valid book details.   - Expected Outcome: The book should be added to the user's favorites in the JSON file,     and a log message should confirm the addition.</p> <ul> <li>Test 2: Duplicate Book</li> <li>Input: A user ID that exists and book details that are already in the user's favorites.</li> <li>Expected Outcome: The user's favorites should remain unchanged, and the duplicate book should      not be added. A log message should indicate that the book already exists.</li> </ul> Source code in <code>backend/json_storage.py</code> <pre><code>def save_favorite(user_id, book_details):\n    \"\"\"\n    Label: Save Favorite Function\n\n    Short Description:\n    Saves a favorite book for a user in the JSON file, ensuring no duplicates are added.\n\n    Parameters:\n    - user_id (int or str): The ID of the user adding a favorite.\n    - book_details (dict): A dictionary containing the details of the book \n                           (e.g., title, author, ISBN).\n\n    Return:\n    - None\n\n    Tests:\n    - Test 1: Valid Save\n      - Input: A user ID that exists and valid book details.\n      - Expected Outcome: The book should be added to the user's favorites in the JSON file,\n        and a log message should confirm the addition.\n\n    - Test 2: Duplicate Book\n      - Input: A user ID that exists and book details that are already in the user's favorites.\n      - Expected Outcome: The user's favorites should remain unchanged, and the duplicate book should \n        not be added. A log message should indicate that the book already exists.\n    \"\"\"\n    all_favorites = load_all_favorites()\n\n    # Ensure the user's favorites list exists\n    if str(user_id) not in all_favorites:\n        all_favorites[str(user_id)] = []\n\n    # Check if the book already exists in the user's favorites\n    existing_book = next(\n        (book for book in all_favorites[str(user_id)] if book['isbn'] == book_details['isbn']),\n        None\n    )\n\n    if not existing_book:\n        all_favorites[str(user_id)].append(book_details)\n\n        # Write the updated favorites back to the JSON file\n        with open(FAVORITES_JSON_PATH, 'w') as file:\n            json.dump(all_favorites, file, indent=4)\n        logging.info(\n            \"Book '%s' added to favorites for user %s.\",\n            book_details['title'],\n            user_id\n        )\n    else:\n        logging.info(\n            \"Book '%s' already exists in favorites for user %s.\",\n            book_details['title'],\n            user_id\n        )\n</code></pre>"},{"location":"docs/reference/json_storage/#backend.json_storage.save_learning","title":"<code>save_learning(user_id, book_isbn, learning)</code>","text":"<p>Label: Save Favorite Learning Function</p> <p>Short Description: Saves a learning note for a specific book in the user's favorites in the JSON file.</p> <p>Parameters: - user_id (int or str): The ID of the user. - book_isbn (str): The ISBN of the book for which the learning note is being saved. - learning (str): The learning note or takeaway from the book.</p> <p>Return: - None</p> <p>Tests: - Test 1: Valid Learning Note Update   - Input: A user ID that exists, a valid ISBN, and a learning note.   - Expected Outcome: The learning note should be updated in the user's favorite book entry in the JSON file,     and a log message should confirm the update.</p> <ul> <li>Test 2: Nonexistent Book</li> <li>Input: A user ID that exists but a book ISBN that is not in the user's favorites.</li> <li>Expected Outcome: The JSON file should remain unchanged since there\u2019s no matching book,      and a warning message should be logged.</li> </ul> Source code in <code>backend/json_storage.py</code> <pre><code>def save_learning(user_id, book_isbn, learning):\n    \"\"\"\n    Label: Save Favorite Learning Function\n\n    Short Description:\n    Saves a learning note for a specific book in the user's favorites in the JSON file.\n\n    Parameters:\n    - user_id (int or str): The ID of the user.\n    - book_isbn (str): The ISBN of the book for which the learning note is being saved.\n    - learning (str): The learning note or takeaway from the book.\n\n    Return:\n    - None\n\n    Tests:\n    - Test 1: Valid Learning Note Update\n      - Input: A user ID that exists, a valid ISBN, and a learning note.\n      - Expected Outcome: The learning note should be updated in the user's favorite book entry in the JSON file,\n        and a log message should confirm the update.\n\n    - Test 2: Nonexistent Book\n      - Input: A user ID that exists but a book ISBN that is not in the user's favorites.\n      - Expected Outcome: The JSON file should remain unchanged since there\u2019s no matching book, \n        and a warning message should be logged.\n    \"\"\"\n    all_favorites = load_all_favorites()\n\n    if str(user_id) in all_favorites:\n        # Find the book by its ISBN and update its learning note\n        for book in all_favorites[str(user_id)]:\n            if book['isbn'] == book_isbn:\n                book['learning'] = learning\n                logging.info(\n                    \"Updated learning for book '%s' (ISBN: %s) for user %s.\",\n                    book['title'],\n                    book_isbn,\n                    user_id\n                )\n                break\n        else:\n            logging.warning(\n                \"Book with ISBN %s not found in favorites for user %s.\",\n                book_isbn,\n                user_id\n            )\n            return\n\n        # Write the updated favorites back to the JSON file\n        with open(FAVORITES_JSON_PATH, 'w') as file:\n            json.dump(all_favorites, file, indent=4)\n    else:\n        logging.warning(\n            \"User %s does not have any favorites stored.\",\n            user_id\n        )\n</code></pre>"},{"location":"docs/reference/json_storage/#backend.json_storage.update_current_page","title":"<code>update_current_page(user_id, book_isbn, current_page)</code>","text":"<p>Update the current page number of a favorite book for the user.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int or str</code> <p>The ID of the user.</p> required <code>book_isbn</code> <code>str</code> <p>The ISBN of the book being updated.</p> required <code>current_page</code> <code>int</code> <p>The new current page number the user is on.</p> required <p>Returns:</p> Type Description <p>None</p> Tests <ol> <li> <p>Valid Page Update:</p> <ul> <li>Input: A user ID that exists, a valid ISBN of a favorite book, and a new current page number.</li> <li>Expected Outcome: The current page number for the specified book should be updated in the user's favorites in the JSON file.</li> </ul> </li> <li> <p>Nonexistent Book Update:</p> <ul> <li>Input: A user ID that exists and an ISBN that does not match any book in the user's favorites.</li> <li>Expected Outcome: The JSON file should remain unchanged since there\u2019s no matching book to update.</li> </ul> </li> </ol> Source code in <code>backend/json_storage.py</code> <pre><code>def update_current_page(user_id, book_isbn, current_page):\n    \"\"\"\n    Update the current page number of a favorite book for the user.\n\n    Parameters:\n        user_id (int or str): The ID of the user.\n        book_isbn (str): The ISBN of the book being updated.\n        current_page (int): The new current page number the user is on.\n\n    Returns:\n        None\n\n\n    Tests:\n        1. **Valid Page Update**:\n            - Input: A user ID that exists, a valid ISBN of a favorite book, and a new current page number.\n            - Expected Outcome: The current page number for the specified book should be updated in the user's favorites in the JSON file.\n\n        2. **Nonexistent Book Update**:\n            - Input: A user ID that exists and an ISBN that does not match any book in the user's favorites.\n            - Expected Outcome: The JSON file should remain unchanged since there\u2019s no matching book to update.\n\n    \"\"\"\n    all_favorites = load_all_favorites()\n\n    if str(user_id) in all_favorites:\n        for book in all_favorites[str(user_id)]:\n            if book['isbn'] == book_isbn:\n                book['current_page'] = current_page\n                logging.info(\n                    f\"Updated current page to {current_page} for book {book['title']} \"\n                    f\"(ISBN: {book_isbn}) for user {user_id}.\"\n                )\n                break\n        else:\n            logging.warning(\n                f\"Book with ISBN {book_isbn} not found in favorites for user {user_id}.\"\n            )\n\n        try:\n            # Write the updated favorites back to the JSON file\n            with open(FAVORITES_JSON_PATH, 'w') as file:\n                json.dump(all_favorites, file, indent=4)\n        except IOError as e:\n            logging.error(\n                f\"Failed to update page for book {book_isbn} for user {user_id}: {e}\"\n            )\n    else:\n        logging.warning(f\"User {user_id} not found in favorites.\")\n</code></pre>"}]}